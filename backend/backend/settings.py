"""
Django settings for backend project.

Generated by 'django-admin startproject' using Django 4.2.2.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

from pathlib import Path
import os
# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get("V_SECRET_KEY")

# SECURITY WARNING: don't run with debug turned on in production!
if os.environ.get("V_ENV") == "DEV":
    DEBUG = True

else:
    DEBUG = False

ALLOWED_HOSTS = os.environ.get("V_ALLOWED_HOSTS").split(",")

CSRF_COOKIE_DOMAIN=os.environ.get("V_COOKIE_DOMAIN") or 'localhost'

# Application definition

RES_ADMIN_URL = os.environ.get('V_RES_ADMIN_URL')

INSTALLED_APPS = [
    'OTPAuth',
    'Payments',
    'corsheaders',
    'nested_admin',
    'rest_framework',
    'api',
    'ResOwner',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django_celery_results',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    "corsheaders.middleware.CorsMiddleware",
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'backend.middleware.AnalyticsMiddleware'
]



# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = 'static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'static'),
]


CSRF_TRUSTED_ORIGINS = os.environ.get("V_FRONTEND_URL").split(',') + ['https://'+ah for ah in ALLOWED_HOSTS] + ['http://'+ah for ah in ALLOWED_HOSTS] + RES_ADMIN_URL.split(',')

ROOT_URLCONF = 'backend.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [
                    os.path.join(BASE_DIR, 'templates'),
                    *STATICFILES_DIRS
                ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]


WSGI_APPLICATION = 'backend.wsgi.application'

CORS_ALLOWED_ORIGINS = os.environ.get("V_FRONTEND_URL").split(',') + RES_ADMIN_URL.split(',')

CORS_ALLOW_CREDENTIALS = True

# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': 'waiter',     
        'USER': os.environ.get("V_DB_USER"),
        'PASSWORD': os.environ.get("V_DB_PASSWORD"), 
        'HOST': os.environ.get("V_DB_HOST"),   
        'COLLATION': 'utf8_general_ci',
        'CHARSET': 'utf8',
        'PORT': os.environ.get("V_DB_PORT"),

        'TEST':{
            'NAME': 'testing',            
        },
        
    },
}


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'Asia/Kolkata'

USE_I18N = True

USE_TZ = True


# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

MEDIA_ROOT = 'media/'
MEDIA_URL = '/media/view/'

if os.environ.get("V_MEDIA_STORAGE") == "S3":
    STORAGES = {
        "default": {
            "BACKEND": "storages.backends.s3.S3Storage",
            "OPTIONS": {
                'bucket_name': 'toone-data',
                'region_name': 'ap-south-1',
            }
        },
        "staticfiles": {
            "BACKEND": "django.contrib.staticfiles.storage.StaticFilesStorage",
        },
    }

#REST FRAMEWORK SETTINGS
REST_FRAMEWORK = {
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 100,

}


#Using Cache as Session Engine
SESSION_ENGINE = "django.contrib.sessions.backends.cache"

#Using Redis as Cache Backend
CACHES = {
    "default": {
        "BACKEND": "django.core.cache.backends.redis.RedisCache",
        "LOCATION": os.environ.get("V_CACHE_URL"),
    }
}

#CELERY SETTINGS

CELERY_BROKER_URL = os.environ.get("V_CELERY_BROKER")
CELERY_RESULT_BACKEND = os.environ.get("V_CELERY_RESULT_BACKEND")

#set result backend as python database
# CELERY_RESULT_BACKEND = 'django-db'
CELERY_ACCEPT_CONTENT = ['application/json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'
#CELERY_IMPORTS  = ('api.tasks',)
CELERY_WORKER_DEDUPLICATE_SUCCESSFUL_TASKS = True
CELERY_BROKER_CONNECTION_RETRY_ON_STARTUP = True
CELERYD_PREFETCH_MULTIPLIER = 4
CELERY_SEND_SENT_EVENT = True
CELERY_TASK_TRACK_STARTED = True
CELERYD_CONCURRENCY = 4
CELERYD_POOL = 'prefork'
CELERY_TIMEZONE = TIME_ZONE

# custom constants

SMS_API_KEY = os.environ.get('V_SMS_API_KEY')

SECURE_HSTS_SECONDS = 31536000

PHONE_PE_MERCHANT_ID = os.environ.get('V_PHONE_PE_MERCHANT_ID')
PHONE_PE_SALT_KEY = os.environ.get('V_PHONE_PE_SALT_KEY')

RAZORPAY_KEY_ID = os.environ.get('V_RAZORPAY_KEY_ID')
RAZORPAY_KEY_SECRET = os.environ.get('V_RAZORPAY_KEY_SECRET')